interface ITableProps<T> {
  headers?: Record<keyof T, string>[];
  data: T[];
  dataConfig: Partial<keyof T, (_value: string) => ReactNode>
  headersConfig: Partial<keyof t, (_value: string) => ReactNode>
}

const Table = <T,>({
      headers,
      data,
      dataConfig,
      headersConfig
    }: ITableProps<T>) => {
    const translation = (v: string) => v;
  return (
      <table className="table">
        <thead>
          {
            headers && (

            headers.map((column) => {
              return column;
            })
                )
          }
          {
            headers === undefined && (
              Object.keys(data[0]).map((column) => {
              if (Object.hasOwnProperty.call(dataConfig, column)) => {
                return dataConfig[column];
              }
                return translation(column);
              }))
            )
          }
        </thead>
        <tbody>
          {
            data.map((item) => {
                  return item;
                })
          }
        </tbody>
      </table>
      )
}

export default Table;
