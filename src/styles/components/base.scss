@import "../theme/default/colors.scss";
@import "../theme/default/spacing.scss";

.bg-transparent {
  background-color: transparent;
}

.fill-transparent {
  fill: transparent !important;
}

$colorNames: primary, secondary, neutral, base-200, base-300, danger, warning,
  success, info, text-disabled;

@function get-color($color, $theme) {
  @if $theme == "dark" {
    @return map-get($colors-dark, $color);
  } @else if $theme == "light" {
    @return map-get($colors-light, $color);
  } @else {
    @error "Invalid theme: #{$theme}. Use 'dark' or 'light'.";
  }
}

@mixin apply-theme($theme) {
  .#{$theme} {
    $colorStatePostfix: "-hover";

    @each $color in $colorNames {
      .bg-#{$color} {
        --color: get-color($color, $theme);
        background-color: var(--color);
      }

      .fill-#{$color} {
        --color: get-color($color, $theme);
        fill: var(--color);
      }

      .ring {
        --color: get-color($color, $theme);
        box-shadow: 0px 0px 0px 2px var(--info) 0;

        &:focus {
          box-shadow: 0px 0px 0px 2px var(--info);
        }

        &-#{$color}:focus {
          box-shadow: 0px 0px 0px 2px var(--color);
        }
      }

      .btn-ring,
      &.input-ring {
        box-shadow: 0px 0px 0px 2px var(--info) 0;

        &:focus {
          box-shadow: 0px 0px 0px 2px var(--info);
        }

        &-#{$color} {
          --color: get-color($color, $theme);
          background-color: var(--color);
        }
      }
    }
  }
}

.dark {
  @include apply-theme(dark);
}

.light {
  @include apply-theme(light);
}
